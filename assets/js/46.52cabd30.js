(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{425:function(t,s,e){"use strict";e.r(s);var n=e(33),o=Object(n.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h3",{attrs:{id:"_1-vue生命周期影响js获取dom元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue生命周期影响js获取dom元素"}},[this._v("#")]),this._v(" 1.Vue生命周期影响js获取DOM元素")]),this._v(" "),s("p",[this._v("在Vue项目里用原生js读取Dom元素，但是发现能打印出来这样的图，打印.length显示0，且不能操作其子元素"),s("br"),this._v("\n上网查了一下发现:是因为我把打印的函数写在了created里，在这个阶段，Dom元素还没有实现渲染，渲染之前打印的这个数组，看到的是渲染后的数据，通俗的讲，就是这个dom结构还没加载完，js就执行了。"),s("br"),this._v("\n解决办法：把函数写在渲染完成之后的mounted里。或者让JS在HTML执行完后再执行：使用window.onload；使用延迟脚本。或者在vue中使用this.$nextTick(()=>{})来获取。")])])}),[],!1,null,null,null);s.default=o.exports}}]);